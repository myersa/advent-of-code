#!/usr/bin/env python3
# https://adventofcode.com/2024/day/11

BLINKS = 75

import functools
import os
import time


def read_input():
  with open("input.txt") as f:
    line = f.read().rstrip()
  return [int(_) for _ in line.split(" ")]


def blink_pebble(pebble):
  if pebble == 0:
    return [1]

  str_pebble = str(pebble)
  digits = len(str_pebble)
  if digits % 2 == 0:
    return [
        int(str_pebble[:int(digits/2)]),
        int(str_pebble[int(digits/2):])
    ]

  return [2024 * pebble]


@functools.cache
def blinks_pebble(pebble, blinks):
  if blinks == 0:
    return 1

  count = 0
  for pebble_out in blink_pebble(pebble):
    count += blinks_pebble(pebble_out, blinks-1)
  return count


def main():
  pebbles = read_input()
  initial_pebble_count = len(pebbles)
  print("There are %d initial pebbles." % initial_pebble_count)
  print("Blinking %d times." % BLINKS)

  # Because the list gets so so huge (literally billions in part 2), can't keep all in memory or even
  # write to file.
  # Instead, since pebbles don't interact with neighbors, do all N blinks for 1 pebble at a time.
  total_pebble_count = 0
  for i in range(initial_pebble_count):
    pebble = pebbles[i]
    pebble_count = blinks_pebble(pebble, BLINKS)
    total_pebble_count += pebble_count
    print("Pebble %d expanded to %d pebbles. %d total pebbles so far." % (i, pebble_count, total_pebble_count))

  print("Blinked %d times. There are now %d pebbles." % (BLINKS, total_pebble_count))
  print("Cache info: %s" % str(blinks_pebble.cache_info()))


if __name__=="__main__":
  main()
