#!/usr/bin/env python3
# https://adventofcode.com/2024/day/12

PART2 = True

RIGHT = ( 0, 1)
LEFT  = ( 0,-1)
DOWN  = ( 1, 0)
UP    = (-1, 0)
ORTHOGONAL_OFFSETS = [RIGHT, DOWN, LEFT, UP]

class Gardens():
  def read_input(self):
    self.grid = []
    with open("input.txt") as f:
      for line in f:
        self.grid.append(list(line.rstrip()))
    self.height = len(self.grid)
    self.width = len(self.grid[0])

  def is_in_bounds(self, pos):
    return 0 <= pos[0] < self.height and 0 <= pos[1] < self.width

  def pos_offset(self, pos, offset):
    return (pos[0] + offset[0], pos[1] + offset[1])

  def plant_type_at(self, pos):
    return self.grid[pos[0]][pos[1]]

  def map_region(self, pos, plant_type):
    positions = set()
    boundary = set()

    def _map_region(pos):
      positions.add(pos)
      for offset in ORTHOGONAL_OFFSETS:
        other_pos = self.pos_offset(pos, offset)
        if other_pos in positions:
          # Already seen this position
          continue
        if not self.is_in_bounds(other_pos) or self.plant_type_at(other_pos) != plant_type:
          # Different region, or out of bounds. 
          boundary.add(pos)
          continue
        _map_region(other_pos)

    _map_region(pos)
    return positions, boundary

  def fences(self, boundary, plant_type):
    fences = []
    for pos in boundary:
      for offset in ORTHOGONAL_OFFSETS:
        other_pos = self.pos_offset(pos, offset)
        if not self.is_in_bounds(other_pos) or self.plant_type_at(other_pos) != plant_type:
          fences.append((pos, offset))

    return fences
          
  def fence_sections_discount(self, fences):
    by_orientation = dict()
    for pos, offset in fences:
      major_coord, minor_coord = (pos[0], pos[1]) if offset in {UP, DOWN} else (pos[1], pos[0])
      by_orientation.setdefault(offset, dict()).setdefault(major_coord, []).append(int(minor_coord))

    discount = 0
    for inner in by_orientation.values():
      for positions in inner.values():
        positions.sort()
        
        # for N consecutive positions, we get a N-1 discount
        last_pos = positions[0]
        for i in range(1, len(positions)):
          pos = positions[i]
          if pos - last_pos == 1:
            discount += 1
          last_pos = pos

    return discount

  def run(self):
    self.read_input()

    seen = set()

    if PART2:
      print("Part 2: applying discount for straight sections")

    regions = 0
    cost = 0
    for row in range(self.height):
      for col in range(self.width):
        pos = (row, col)
        if pos in seen:
          continue

        plant_type = self.plant_type_at(pos)
        positions, boundary = self.map_region(pos, plant_type)
        fences = self.fences(boundary, plant_type)
        perimeter = len(fences)

        if PART2:
          perimeter -= self.fence_sections_discount(fences)

        cost += perimeter * len(positions)
        regions += 1

        seen.update(positions)
    
    print("There are %d regions; total fence cost is %d." % (regions, cost))


if __name__=="__main__":
  Gardens().run()
