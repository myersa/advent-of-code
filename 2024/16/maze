#!/usr/bin/env python3
# https://adventofcode.com/2024/day/16

from collections import defaultdict
from dataclasses import dataclass
from heapq import heappush, heappop
import math


@dataclass(frozen=True, order=True)
class Offset():
  x: int
  y: int


@dataclass(frozen=True, order=True)
class Position():
  x: int
  y: int

  def offset(self, offset: Offset):
    return Position(x=self.x + offset.x, y=self.y + offset.y)

  def subtract(self, other) -> Offset:
    return Offset(x=self.x - other.x, y=self.y - other.y)

  def distance(self, other) -> int:
    diff = self.subtract(other)
    return abs(diff.x) + abs(diff.y)


@dataclass(frozen=True, order=True)
class Orientation(Offset):
  symbol: str 


@dataclass(frozen=True, order=True)
class State():
  position: Position
  orientation: Orientation


@dataclass(frozen=True)
class Grid():
  grid: list

  def __getitem__(self, pos: Position):
    return self.grid[pos.y][pos.x]


WALL = "#"
EMPTY = "."
START = "S"
END = "E"

MOVE_COST = 1
TURN_COST = 1000

EAST  = Orientation( 1,  0, ">")
SOUTH = Orientation( 0,  1, "v")
WEST  = Orientation(-1,  0, "<")
NORTH = Orientation( 0, -1, "^")

# A 90ยบ turn means moving from one of these to the next one left or right (with wraparound)
TURNS = [EAST, SOUTH, WEST, NORTH]


def _turn(orientation, turn_direction):
  i = TURNS.index(orientation) 
  i += turn_direction
  i %= len(TURNS)
  return TURNS[i]


def turn_right(orientation):
  return _turn(orientation, 1)


def turn_left(orientation):
  return _turn(orientation, -1)


def visualize(grid: Grid, states: list = None):
  grid = grid.grid
  if states is not None:
    grid = [list(row) for row in grid]
    for state in states:
      grid[state.position.y][state.position.x] = state.orientation.symbol

  y = 0
  for row in grid:
    print("%03d: " % y, end="")
    for cell in row:
      print(cell, end="")
    print()
    y += 1


def read_input():
  grid = []
  start = None
  end = None
  with open("input.txt") as f:
    y = 0
    for line in f:
      line = line.rstrip()
      grid.append(line)
      
      # Find start and end
      x = line.find(START)
      if x > 0:
        start = Position(x, y)
      x = line.find(END)
      if x > 0:
        end = Position(x, y)
      y += 1

  return Grid(grid), start, end


def Dijkstra(start, goal, neighbors_of):
  """
  Modified from A* to Dijkstra's Algorithm.
  Tracks all optimal paths instead of just one.
  """

  predecessors = defaultdict(list)  # Tracks all optimal predecessors
  g_score = defaultdict(lambda: math.inf)
  g_score[start] = 0

  open_set = []
  def push(node, cost):
    heappush(open_set, (g_score[node], node, cost))
  def pop():
    return heappop(open_set)
  def is_pushed(node):
    for _, other, _ in open_set:
      if other == node:
        return True
    return False
  push(start, None)

  while open_set:
    current_g, current, cost = pop()
    
    if current == goal:
      # Found the shortest cost to goal, continue processing to track all paths
      continue  

    for neighbor, move_cost in neighbors_of(current):
      tentative_g_score = current_g + move_cost

      if tentative_g_score < g_score[neighbor]:
        # Found a strictly better path
        g_score[neighbor] = tentative_g_score
        predecessors[neighbor] = [(current, cost)]  # Reset with new optimal path
        if not is_pushed(neighbor):
          push(neighbor, move_cost)

      elif tentative_g_score == g_score[neighbor]:
        # Found an alternative optimal path
        predecessors[neighbor].append((current, cost))

  # If no path found
  if goal not in predecessors:
    return None

  # Reconstruct all shortest paths
  def reconstruct_paths(current):
    if current == start:
      return [[start]]
    paths = []
    for prev, _ in predecessors[current]:
      for path in reconstruct_paths(prev):
        paths.append(path + [current])
    return paths

  return reconstruct_paths(goal)


def solve_maze(grid: Grid, start_pos: Position, end_pos: Position):
  def neighbors_of(state: State):
    for direction, turn_cost in [
        (state.orientation, 0),
        (turn_left(state.orientation),  TURN_COST),
        (turn_right(state.orientation), TURN_COST)
    ]:
      next_state = State(state.position.offset(direction), direction)
      if grid[next_state.position] != WALL:
        yield next_state, turn_cost + MOVE_COST

  start = State(start_pos, EAST)
  end = State(end_pos, NORTH)  # orientation at end should be ignored, but this works for my input regardless
  return Dijkstra(start, end, neighbors_of)


def main():
  grid, start, end = read_input()
  paths = solve_maze(grid, start, end)
  if not paths:
    print("Failed to solve maze :(")
  else:
    print(f"Found {len(paths)} optimal paths.")
    distinct_positions = set()
    for path in paths:
      for state in path:
        distinct_positions.add(state.position)
    print(f"There are {len(distinct_positions)} distinct positions on all optimal paths.")


if __name__=="__main__":
  main()
